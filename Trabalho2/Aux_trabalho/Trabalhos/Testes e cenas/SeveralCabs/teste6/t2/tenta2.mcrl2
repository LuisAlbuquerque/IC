sort
    Viatura = struct a|b;
    Lista = List(Viatura);

act
    v_sai,cr_sai,v_reg,cr_reg,sai,reg, rec, fcr, v_alo,cr_alo,alo, v_snr,cr_snr,v_snf,cr_snf,snr,snf, v_anu,cr_anu,anu, v_tic,cr_tic,tic, v_det,cr_det,det, cl_rec,cl_via_rec,wave: Viatura;

map 
    add: Lista # Viatura -> Lista; 
    remove: Lista # Viatura -> Lista;

var lst: Lista;
    v: Viatura;

eqn (lst == []) -> remove(lst,v) = [];
    (v != head(lst)) -> remove(lst,v) = [head(lst)] ++ remove(tail(lst),v);
    (v == head(lst)) -> remove(lst,v) = tail(lst);

    add(lst,v) = lst <| v;

proc
  Viaturas (lst: Lista,emServ:Lista) =
    sum v:Viatura.((v in lst)==false) -> v_sai(v).S(add(lst,v),emServ);

  S(lst: Lista,emServ:Lista) =
    sum v:Viatura.(v in lst) ->
    (
      ( 
        ((v in emServ)==false) -> 
        (
          rec(v).S(lst,add(emServ,v)) +
          v_alo(v).( rec(v).S(lst,add(emServ,v)) + v_anu(v) ) +
          ( v_reg(v).(#lst>1) -> S(remove(lst,v),emServ) <> Viaturas(remove(lst,v),emServ) )
        )
        <>
        ( 
          fcr(v).S(lst,remove(emServ,v)) + 
          v_det(v)
        )
      ) + 
      Viaturas(lst,emServ) +
      v_tic(v)
    ).S(lst,emServ);

  Controlador(lst: Lista,emServ:Lista) =
      sum v:Viatura.((v in lst)==false) -> cr_sai(v).C(add(lst,v),emServ);
    
  C(lst: Lista,emServ:Lista) =
    sum v:Viatura.(v in lst) ->
    (
      ( 
        ((v in emServ)==false) -> 
        (  
          cr_snr(v).C(lst,add(emServ,v)) +
          cr_alo(v).( cr_snr(v).C(lst,add(emServ,v)) + cr_anu(v) ) + 
          ( cr_reg(v).(#lst>1) -> C(remove(lst,v),emServ) <> Controlador(remove(lst,v),emServ) )
        )
        <>
        ( 
          cr_snf(v).C(lst,remove(emServ,v)) +
          cr_det(v)
        )
      ) +
      Controlador(lst,emServ) +
      cr_tic(v)
    ).C(lst,emServ);


init
     allow(
       {sai,reg,alo,snr,snf,anu,tic,det},
       comm(
            { v_sai|cr_sai -> sai,          % Início de turno
              v_reg|cr_reg -> reg,          % Fim de turno
              rec|cr_snr -> snr,         % Início de corrida
              fcr|cr_snf -> snf,         % Fim de corrida
              v_tic|cr_tic -> tic,            % Comunicação de localização
              v_det|cr_det -> det,           % Táxi deteta potencial cliente
%              cl_rec|cl_via_rec -> wave,      % Cliente manda parar táxi
              v_alo|cr_alo -> alo,         % Central agenda corrida de cliente
              v_anu|cr_anu -> anu            % Anulação de serviço
            },
            Viaturas([],[]) || Controlador([],[])
     ) ) ;
